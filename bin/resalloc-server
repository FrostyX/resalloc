#!/usr/bin/env python

# Resalloc server.
# Copyright (C) 2017 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import os
import time
import threading

from resalloc import helpers
from resallocserver import db, models, api
from resallocserver.config import CONFIG
from resallocserver.manager import Manager
from resallocserver.log import get_logger
import alembic.config
import queue

log = get_logger(__name__)

PORT = 8000
CLSXMLRPC = None

try:
    import SimpleXMLRPCServer
    import SocketServer
    class wrap(SocketServer.ThreadingMixIn, SimpleXMLRPCServer.SimpleXMLRPCServer):
        pass
    CLSXMLRPC = wrap
except:
    import xmlrpc.server
    import socketserver
    class wrap(socketserver.ThreadingMixIn, xmlrpc.server.SimpleXMLRPCServer):
        pass
    CLSXMLRPC = wrap


class Synchronizer(object):
    ticket = threading.Event()
    resource_ready = threading.Condition()
    resource_tid = None


class Server(threading.Thread):
    server = None

    def run(self):
        self.server = CLSXMLRPC((CONFIG['host'], CONFIG['port']))
        self.server.allow_none = True
        self.server.daemon_threads = True
        self.server.register_introspection_functions()
        self.server.register_instance(api.ServerAPI(self.sync))
        self.server.serve_forever()

    def shutdown(self):
        self.server.shutdown()


def init_by_alembic():
    log.debug("alembic init")
    alembic_dir = os.path.dirname(db.__file__)
    with helpers.pushd(alembic_dir):
        alembicArgs = [
        '--raiseerr',
        'upgrade', 'head',
        ]
        alembic.config.main(argv=alembicArgs)


def init_by_models():
    with db.session_scope() as session:
        models.Base.metadata.create_all(session.get_bind())


if __name__ == "__main__":
    # Create the database, if not exist yet.
    if db.engine.dialect.name == 'sqlite':
        init_by_models()
    else:
        init_by_alembic()

    # Synchronization tool.
    sync = Synchronizer()

    # Start server on background.
    server = Server()
    server.sync = sync
    server.start()

    try:
        Manager(sync).run()
    except KeyboardInterrupt:
        pass
    finally:
        server.shutdown()
